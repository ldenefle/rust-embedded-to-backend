#[macro_use]
extern crate serde_derive;
extern crate wasm_bindgen;
use wasm_bindgen::prelude::*;

use byteorder::{ByteOrder, LittleEndian};
use core::slice;
use cty;

const SAMPLE_MAX_SIZE: usize = 20;
const PACKETS_MAX_SIZE: usize = 50;

#[derive(Serialize)]
struct Packet {
    timestamp: u32,
    stream_id: u32,
    sample: Vec<u8>,
}

#[derive(Serialize)]
struct ParserResult {
    packets: Vec<Packet>,
    remaining: u32,
}

#[repr(C)]
pub struct CPacket {
    pub timestamp: cty::uint32_t,
    pub stream_id: cty::uint32_t,
    pub sample_len: cty::uint16_t,
    pub sample: [cty::uint8_t; SAMPLE_MAX_SIZE],
}

#[repr(C)]
pub struct CParserResult {
    pub packets: [CPacket; PACKETS_MAX_SIZE],
    pub packets_len: cty::uint16_t,
    pub remaining: cty::uint32_t,
}

#[no_mangle]
pub extern "C" fn C_parse_packet(
    bytes: *mut cty::uint8_t,
    bytes_len: cty::uint16_t,
    result: *mut CParserResult,
) -> cty::c_int {
    // Check that we don't get null pointers
    if result.is_null() || bytes.is_null() {
        return -1;
    }

    unsafe {
        let bytes: &[u8] = slice::from_raw_parts(bytes, bytes_len as usize);
        let parser_result = match parse_packet(bytes) {
            Ok(res) => res,
            Err(_) => return -1,
        };
        // Copy the remaining packets number
        (*result).remaining = parser_result.remaining as cty::uint32_t;
        (*result).packets_len = parser_result.packets.len() as cty::uint16_t;
        // Copy the packets
        parser_result
            .packets
            .iter()
            .map(|y| {
                let mut ret = CPacket {
                    timestamp: y.timestamp as cty::uint32_t,
                    stream_id: y.stream_id as cty::uint32_t,
                    sample_len: y.sample.len() as cty::uint16_t,
                    sample: [0; 20],
                };
                y.sample
                    .iter()
                    .enumerate()
                    .for_each(|(i, val)| ret.sample[i] = *val);
                ret
            })
            .enumerate()
            .for_each(|(i, val)| (*result).packets[i] = val);
    };
    0
}

#[wasm_bindgen]
pub fn js_parse_packet(bytes: &JsValue) -> JsValue {
    let bytes: Vec<u8> = bytes.into_serde().unwrap();
    let result = parse_packet(&bytes).unwrap();
    JsValue::from_serde(&result).unwrap()
}

fn parse_packet(bytes: &[u8]) -> Result<ParserResult, &'static str> {
    let mut res = ParserResult {
        packets: Vec::new(),
        remaining: 0,
    };

    if bytes.len() < 4 {
        return Err("Invalid size");
    }

    res.remaining = LittleEndian::read_u32(&bytes[..4]);

    let mut i = 4;

    while i < bytes.len() {
        let packet_size = bytes[i] as usize;
        if packet_size + i > bytes.len() {
            break;
        }
        let packet = Packet {
            timestamp: LittleEndian::read_u32(&bytes[i + 1..i + 5]),
            stream_id: LittleEndian::read_u32(&bytes[i + 5..i + 9]),
            sample: bytes[i + 9..i + packet_size + 1].to_vec(),
        };

        res.packets.push(packet);
        i += packet_size + 1;
    }

    Ok(res)
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn it_works() {
        let valid_packet = vec![
            0x60, 0x03, 0x00, 0x00, 0x0C, 0x51, 0xB2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x88,
            0xA1, 0xC1, 0x41, 0x0C, 0x92, 0xB2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xD0, 0x57,
            0xC3, 0x41, 0x0C, 0x95, 0xB2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x48, 0xA6, 0xCF,
            0x41, 0x0C, 0x45, 0xB7, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xF0, 0x46, 0xB4, 0x41,
            0x0C, 0xFC, 0xB9, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xB8, 0xE3, 0xB8, 0x41, 0x0C,
            0x1A, 0xBA, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xE8, 0xB8, 0x41, 0x0C, 0x38,
            0xBA, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xD8, 0xA5, 0xB8, 0x41, 0x0C, 0x56, 0xBA,
            0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xE8, 0xB8, 0x41, 0x0C, 0x74, 0xBA, 0x32,
            0x5E, 0x00, 0x00, 0x02, 0x00, 0x38, 0x36, 0xB9, 0x41, 0x0C, 0x92, 0xBA, 0x32, 0x5E,
            0x00, 0x00, 0x02, 0x00, 0x10, 0x31, 0xB9, 0x41, 0x0C, 0xB0, 0xBA, 0x32, 0x5E, 0x00,
            0x00, 0x02, 0x00, 0xF8, 0x0C, 0xB9, 0x41, 0x0C, 0xCE, 0xBA, 0x32, 0x5E, 0x00, 0x00,
            0x02, 0x00, 0xB0, 0xA0, 0xB8, 0x41, 0x0C, 0xEC, 0xBA, 0x32, 0x5E, 0x00, 0x00, 0x02,
            0x00, 0x78, 0x5F, 0xB9, 0x41, 0x0C, 0x0A, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00,
            0xC0, 0x26, 0xB9, 0x41, 0x0C, 0x28, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE8,
            0x2B, 0xB9, 0x41, 0x0C, 0x46, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xC0, 0x26,
            0xB9, 0x41, 0x0C, 0x64, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x48, 0xBC, 0xB9,
            0x41, 0x0C, 0x82, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xC0, 0x26, 0xB9, 0x41,
            0x0C, 0xA0, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x58, 0xF8, 0xB8, 0x41, 0x0C,
            0xBE, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x10, 0x31, 0xB9, 0x41, 0x0C, 0xDC,
            0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE8, 0xD0, 0xB9, 0x41, 0x0C, 0xFA, 0xBB,
            0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x80, 0xA2, 0xB9, 0x41, 0x0C, 0x87, 0xBC, 0x32,
            0x5E, 0x00, 0x00, 0x02, 0x00, 0x48, 0xBC, 0xB9, 0x41, 0x0C, 0xFF, 0xBC, 0x32, 0x5E,
            0x00, 0x00, 0x02, 0x00, 0xF0, 0x13, 0xBA, 0x41, 0x0C, 0x77, 0xBD, 0x32, 0x5E, 0x00,
            0x00, 0x02, 0x00, 0x38, 0xDB, 0xB9, 0x41, 0x0C, 0xEF, 0xBD, 0x32, 0x5E, 0x00, 0x00,
            0x02, 0x00, 0xB0, 0xEA, 0xB9, 0x41, 0x0C, 0x67, 0xBE, 0x32, 0x5E, 0x00, 0x00, 0x02,
            0x00, 0x58, 0x42, 0xBA, 0x41, 0x0C, 0xDF, 0xBE, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00,
            0x80, 0x47, 0xBA, 0x41, 0x0C, 0x57, 0xBF, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x18,
            0xBE, 0xBA, 0x41, 0x0C, 0xCF, 0xBF, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xD7,
            0xBA, 0x41, 0x0C, 0x47, 0xC0, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x38, 0x25, 0xBB,
            0x41, 0x0C, 0xBF, 0xC0, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xD7, 0xBA, 0x41,
            0x0C, 0x37, 0xC1, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x28, 0x44, 0xBB, 0x41, 0x0C,
            0xAF, 0xC1, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0x7C, 0xBB, 0x41, 0x0C, 0x27,
            0xC2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x78, 0xF3, 0xBB, 0x41, 0x0C, 0x9F, 0xC2,
            0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xC0, 0xBA, 0xBB, 0x41, 0x0C, 0x17, 0xC3, 0x32,
            0x5E, 0x00, 0x00, 0x02, 0x00, 0x58, 0x31, 0xBC, 0x41, 0x0C, 0x8F, 0xC3, 0x32, 0x5E,
            0x00, 0x00, 0x02, 0x00, 0x50, 0xEE, 0xBB, 0x41, 0x0C, 0x07, 0xC4, 0x32, 0x5E, 0x00,
            0x00, 0x02, 0x00, 0x78, 0x98, 0xBC, 0x41,
        ];

        let result = parse_packet(&valid_packet).unwrap();
        assert_eq!(result.remaining, 0x360);
        assert_eq!(result.packets.len(), 39);
        assert_eq!(result.packets[0].timestamp, 0x5E32B251);
        assert_eq!(result.packets[0].stream_id, 0x20000);
        assert_eq!(result.packets[0].sample, vec![0x88, 0xA1, 0xC1, 0x41]);
        assert_eq!(result.packets[1].timestamp, 0x5E32B292);
        assert_eq!(result.packets[1].stream_id, 0x20000);
        assert_eq!(result.packets[1].sample, vec![0xD0, 0x57, 0xC3, 0x41]);
    }
}
