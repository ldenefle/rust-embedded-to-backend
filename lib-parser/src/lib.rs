#![cfg_attr(not(feature = "std"), no_std)]

#[cfg(not(feature = "std"))]
extern crate heapless;
#[cfg(not(feature = "std"))]
use heapless::consts::*;
#[cfg(not(feature = "std"))]
use heapless::Vec;

#[cfg(feature = "serialize")]
#[macro_use]
#[cfg(feature = "serialize")]
extern crate serde_derive;

#[cfg_attr(feature = "serialize", derive(Serialize))]
pub struct Packet {
    pub timestamp: u32,
    pub stream_id: u32,
    #[cfg(not(feature = "std"))]
    pub sample: Vec<u8, U20>,
    #[cfg(feature = "std")]
    pub sample: Vec<u8>,
}

#[cfg_attr(feature = "serialize", derive(Serialize))]
pub struct ParserResult {
    #[cfg(not(feature = "std"))]
    pub packets: Vec<Packet, U50>,
    #[cfg(feature = "std")]
    pub packets: Vec<Packet>,
    pub remaining: u32,
}

use byteorder::{ByteOrder, LittleEndian};

pub fn parse_packet(bytes: &[u8]) -> Result<ParserResult, &'static str> {
    let mut res = ParserResult {
        packets: Vec::new(),
        remaining: 0,
    };

    if bytes.len() < 4 {
        return Err("Invalid size");
    }

    res.remaining = LittleEndian::read_u32(&bytes[..4]);

    let mut i = 4;

    while i < bytes.len() {
        let packet_size = bytes[i] as usize;
        if packet_size + i > bytes.len() {
            break;
        }
        let mut packet = Packet {
            timestamp: LittleEndian::read_u32(&bytes[i + 1..i + 5]),
            stream_id: LittleEndian::read_u32(&bytes[i + 5..i + 9]),
            #[cfg(not(feature = "std"))]
            sample: Vec::new(),
            #[cfg(feature = "std")]
            sample: bytes[i + 9..i + packet_size + 1].to_vec(),
        };

        #[cfg(not(feature = "std"))]
        packet.sample.extend_from_slice(&bytes[i + 9..i + packet_size + 1]).unwrap();

        res.packets.push(packet);
        i += packet_size + 1;
    }

    Ok(res)
}

#[cfg(feature = "std")]
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn it_works() {
        let valid_packet = vec![
            0x60, 0x03, 0x00, 0x00, 0x0C, 0x51, 0xB2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x88,
            0xA1, 0xC1, 0x41, 0x0C, 0x92, 0xB2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xD0, 0x57,
            0xC3, 0x41, 0x0C, 0x95, 0xB2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x48, 0xA6, 0xCF,
            0x41, 0x0C, 0x45, 0xB7, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xF0, 0x46, 0xB4, 0x41,
            0x0C, 0xFC, 0xB9, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xB8, 0xE3, 0xB8, 0x41, 0x0C,
            0x1A, 0xBA, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xE8, 0xB8, 0x41, 0x0C, 0x38,
            0xBA, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xD8, 0xA5, 0xB8, 0x41, 0x0C, 0x56, 0xBA,
            0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xE8, 0xB8, 0x41, 0x0C, 0x74, 0xBA, 0x32,
            0x5E, 0x00, 0x00, 0x02, 0x00, 0x38, 0x36, 0xB9, 0x41, 0x0C, 0x92, 0xBA, 0x32, 0x5E,
            0x00, 0x00, 0x02, 0x00, 0x10, 0x31, 0xB9, 0x41, 0x0C, 0xB0, 0xBA, 0x32, 0x5E, 0x00,
            0x00, 0x02, 0x00, 0xF8, 0x0C, 0xB9, 0x41, 0x0C, 0xCE, 0xBA, 0x32, 0x5E, 0x00, 0x00,
            0x02, 0x00, 0xB0, 0xA0, 0xB8, 0x41, 0x0C, 0xEC, 0xBA, 0x32, 0x5E, 0x00, 0x00, 0x02,
            0x00, 0x78, 0x5F, 0xB9, 0x41, 0x0C, 0x0A, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00,
            0xC0, 0x26, 0xB9, 0x41, 0x0C, 0x28, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE8,
            0x2B, 0xB9, 0x41, 0x0C, 0x46, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xC0, 0x26,
            0xB9, 0x41, 0x0C, 0x64, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x48, 0xBC, 0xB9,
            0x41, 0x0C, 0x82, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xC0, 0x26, 0xB9, 0x41,
            0x0C, 0xA0, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x58, 0xF8, 0xB8, 0x41, 0x0C,
            0xBE, 0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x10, 0x31, 0xB9, 0x41, 0x0C, 0xDC,
            0xBB, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE8, 0xD0, 0xB9, 0x41, 0x0C, 0xFA, 0xBB,
            0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x80, 0xA2, 0xB9, 0x41, 0x0C, 0x87, 0xBC, 0x32,
            0x5E, 0x00, 0x00, 0x02, 0x00, 0x48, 0xBC, 0xB9, 0x41, 0x0C, 0xFF, 0xBC, 0x32, 0x5E,
            0x00, 0x00, 0x02, 0x00, 0xF0, 0x13, 0xBA, 0x41, 0x0C, 0x77, 0xBD, 0x32, 0x5E, 0x00,
            0x00, 0x02, 0x00, 0x38, 0xDB, 0xB9, 0x41, 0x0C, 0xEF, 0xBD, 0x32, 0x5E, 0x00, 0x00,
            0x02, 0x00, 0xB0, 0xEA, 0xB9, 0x41, 0x0C, 0x67, 0xBE, 0x32, 0x5E, 0x00, 0x00, 0x02,
            0x00, 0x58, 0x42, 0xBA, 0x41, 0x0C, 0xDF, 0xBE, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00,
            0x80, 0x47, 0xBA, 0x41, 0x0C, 0x57, 0xBF, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x18,
            0xBE, 0xBA, 0x41, 0x0C, 0xCF, 0xBF, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xD7,
            0xBA, 0x41, 0x0C, 0x47, 0xC0, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x38, 0x25, 0xBB,
            0x41, 0x0C, 0xBF, 0xC0, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0xD7, 0xBA, 0x41,
            0x0C, 0x37, 0xC1, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x28, 0x44, 0xBB, 0x41, 0x0C,
            0xAF, 0xC1, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xE0, 0x7C, 0xBB, 0x41, 0x0C, 0x27,
            0xC2, 0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0x78, 0xF3, 0xBB, 0x41, 0x0C, 0x9F, 0xC2,
            0x32, 0x5E, 0x00, 0x00, 0x02, 0x00, 0xC0, 0xBA, 0xBB, 0x41, 0x0C, 0x17, 0xC3, 0x32,
            0x5E, 0x00, 0x00, 0x02, 0x00, 0x58, 0x31, 0xBC, 0x41, 0x0C, 0x8F, 0xC3, 0x32, 0x5E,
            0x00, 0x00, 0x02, 0x00, 0x50, 0xEE, 0xBB, 0x41, 0x0C, 0x07, 0xC4, 0x32, 0x5E, 0x00,
            0x00, 0x02, 0x00, 0x78, 0x98, 0xBC, 0x41,
        ];

        let result = parse_packet(&valid_packet).unwrap();
        assert_eq!(result.remaining, 0x360);
        assert_eq!(result.packets.len(), 39);
        assert_eq!(result.packets[0].timestamp, 0x5E32B251);
        assert_eq!(result.packets[0].stream_id, 0x20000);
        assert_eq!(result.packets[0].sample, vec![0x88, 0xA1, 0xC1, 0x41]);
        assert_eq!(result.packets[1].timestamp, 0x5E32B292);
        assert_eq!(result.packets[1].stream_id, 0x20000);
        assert_eq!(result.packets[1].sample, vec![0xD0, 0x57, 0xC3, 0x41]);
    }
}
